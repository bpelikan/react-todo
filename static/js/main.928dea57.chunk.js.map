{"version":3,"sources":["TodoBanner.js","TodoCreator.js","TodoRow.js","VisibilityControl.js","App.js","serviceWorker.js","index.js"],"names":["TodoBanner","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","render","react_default","a","createElement","className","props","name","tasks","filter","t","done","inherits","Component","TodoCreator","updateNewTextValue","event","setState","newItemText","target","value","createNewTodo","callback","state","onChange","onClick","TodoRow","item","action","type","checked","callbackDeleteRow","class","VisibilityControl","isChecked","e","description","App","saveStateDataToLocalStorage","localStorage","setItem","JSON","stringify","task","todoItems","find","replace","toConsumableArray","toggleTodo","todo","map","objectSpread","toggleShowingCompletedTodo","showCompleted","todoTableRows","doneValue","TodoRow_TodoRow","key","todoTableRowDelete","deletedRow","componentDidMount","data","getItem","parse","userName","TodoBanner_TodoBanner","TodoCreator_TodoCreator","VisibilityControl_VisibilityControl","Boolean","window","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.928dea57.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class TodoBanner extends Component {\r\n    render = () =>\r\n        <h4 className=\"bg-primary text-white text-center p-2\">\r\n            { this.props.name }'s To Do List ({ this.props.tasks.filter(t => !t.done).length } items to do)\r\n        </h4>\r\n}","import React, { Component } from 'react';\r\n\r\nexport class TodoCreator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { newItemText: \"\" }\r\n    }\r\n    \r\n    updateNewTextValue = (event) => {\r\n        this.setState({ newItemText: event.target.value});\r\n    }\r\n    \r\n    createNewTodo = () => {\r\n        this.props.callback(this.state.newItemText);\r\n        this.setState({ newItemText: \"\"});\r\n    }\r\n    \r\n    render = () =>\r\n    <div className=\"my-1\">\r\n        <input className=\"form-control\" value={ this.state.newItemText } onChange={ this.updateNewTextValue } />\r\n        <button className=\"btn btn-primary mt-1\" onClick={ this.createNewTodo }>Add</button>\r\n    </div>\r\n}","import React, { Component } from 'react';\r\n\r\nexport class TodoRow extends Component {\r\n    render = () =>\r\n        <tr>\r\n            <td>\r\n                { this.props.item.action}\r\n            </td>\r\n            <td>\r\n                <input type=\"checkbox\" checked={ this.props.item.done } onChange={ () => this.props.callback(this.props.item) } /> \r\n            </td>\r\n            <td>\r\n                <button className=\"btn btn-primary mt-1\" onClick={ () => this.props.callbackDeleteRow(this.props.item) }>\r\n                    <span class=\"oi oi-trash\"></span>\r\n                </button>\r\n            </td>\r\n        </tr>\r\n}","import React, { Component } from 'react';\r\n\r\nexport class VisibilityControl extends Component {\r\n    render = () =>\r\n        <div className=\"form-check\">\r\n            <input className=\"form-check-input\" type=\"checkbox\" checked={ this.props.isChecked } onChange={ (e) => this.props.callback(e.target.checked) } />\r\n            <label className=\"form-check-label\">\r\n                Show { this.props.description }\r\n            </label>\r\n        </div>\r\n}","import React, { Component } from 'react';\nimport { TodoBanner } from \"./TodoBanner\";\nimport { TodoCreator } from \"./TodoCreator\";\nimport { TodoRow } from \"./TodoRow\";\nimport { VisibilityControl } from \"./VisibilityControl\";\n\nexport default class App extends Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n        userName: \"Adam\",\n        todoItems: [{ action: \"Buy Flowers\", done: false },\n                    { action: \"Get Shoes\", done: false },\n                    { action: \"Collect Tickets\", done: true },\n                    { action: \"Call Joe\", done: false }],\n        showCompleted: true\n    }\n  }\n\n  saveStateDataToLocalStorage = () => \n    localStorage.setItem(\"todos\", JSON.stringify(this.state))\n\n  updateNewTextValue = (event) => {\n    this.setState({ newItemText: event.target.value })\n  }\n\n  createNewTodo = (task) => {\n    if (!this.state.todoItems.find(item => item.action === task) && task.replace(/\\s/g, '') !== \"\") {\n        this.setState({ \n            todoItems: [...this.state.todoItems, { action: task, done: false }]},\n          this.saveStateDataToLocalStorage\n        )\n    }\n  }\n  \n  toggleTodo = (todo) => this.setState({ \n      todoItems: this.state.todoItems.map(item => item.action === todo.action? { ...item, done: !item.done } : item)},\n    this.saveStateDataToLocalStorage\n  )\n  \n  toggleShowingCompletedTodo = (checked) => {\n    this.setState({ \n        showCompleted: checked }, \n      this.saveStateDataToLocalStorage\n    )\n  }\n\n  todoTableRows = (doneValue) => this.state.todoItems\n    .filter(item => item.done === doneValue)\n    .map(item => <TodoRow key={ item.action } item={ item } callback={ this.toggleTodo } callbackDeleteRow={ this.todoTableRowDelete } />)\n\n  todoTableRowDelete = (deletedRow) => {\n    this.setState({\n        todoItems: this.state.todoItems.filter(item => item !== deletedRow)},\n      this.saveStateDataToLocalStorage\n    )\n  }\n\n  componentDidMount = () => {\n    let data = localStorage.getItem(\"todos\");\n    this.setState(\n      data != null ? JSON.parse(data) : {\n        userName: \"Adam\",\n        todoItems: [\n            { action: \"Buy Flowers\", done: false },\n            { action: \"Get Shoes\", done: false },\n            { action: \"Collect Tickets\", done: true },\n            { action: \"Call Joe\", done: false }],\n          showCompleted: true\n      }\n    )\n  }\n\n  render = () =>\n      <div>\n        <TodoBanner name={ this.state.userName } tasks={this.state.todoItems } />\n        <div className=\"container-fluid\">\n          <TodoCreator callback={ this.createNewTodo } />\n          <table className=\"table table-striped table-bordered\">\n            <thead>\n              <tr>\n                <th>\n                  Description\n                </th>\n                <th>\n                    Done\n                </th>\n                <th>\n                    Delete\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              { this.todoTableRows(false) }\n            </tbody>\n          </table>\n          <div className=\"bg-secondary text-white text-center p-2\">\n            <VisibilityControl description=\"Completed Tasks\" isChecked={this.state.showCompleted} callback={ this.toggleShowingCompletedTodo } />\n          </div>\n          { \n            this.state.showCompleted &&\n            <table className=\"table table-striped table-bordered\">\n              <thead>\n                <tr>\n                  <th>\n                    Description\n                  </th>\n                  <th>\n                    Done\n                  </th>\n                  <th>\n                    Delete\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                { this.todoTableRows(true) }\n              </tbody>\n            </table>\n          }\n        </div>\n      </div>\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}